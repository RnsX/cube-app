{"version":3,"sources":["logo.svg","components/graph.components/graph-node.component.jsx","components/graph.components/graph-container.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","xDiff","yDiff","handleNodeSelection","id","transition","scale","className","style","transform","onMouseDown","e","GraphContainer","useState","activeNode","setActiveNode","X","Y","isMoving","Nodes","setNodes","console","log","target","maxIdValue","array","idList","map","item","Math","max","clientX","clientY","startMove","onMouseUp","endMove","onMouseMove","moving","onDoubleClick","removalTransition","onTransitionEnd","filter","node","removeNode","onClick","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28466526.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport './graph-node.style.css'\r\n\r\nconst Node = ({ xDiff, yDiff, handleNodeSelection, id, transition, scale }) => {\r\n    return (\r\n        <div \r\n            className=\"node-container\"\r\n            style={{transform: `translate(${xDiff *(-1)}px, ${yDiff *(-1)}px) ${scale}`, transition: `${transition}` }}\r\n        >\r\n            <p id={id} onMouseDown={(e) => handleNodeSelection(e)} className=\"node-text\" >Move me!</p>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Node\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './graph-node.style.css';\r\nimport Node from './graph-node.component'\r\n\r\n\r\nconst GraphContainer = () => {\r\n\r\n    const [activeNode, setActiveNode] = useState(\"none\");\r\n\r\n    const [Nodes, setNodes] = useState([\r\n        {\r\n            id: 1,\r\n            xDiff: 0,\r\n            yDiff: 0,\r\n            X: 0,\r\n            Y: 0,\r\n            isMoving: false,\r\n            transition: \"0s ease-in-out\",\r\n            transform: \"scale(1)\"\r\n        },\r\n    ]);\r\n    \r\n    const startMove = (e) =>{\r\n        console.log(\"found X at: \"+e.clientX)\r\n        setNodes(\r\n            Nodes.map(item => \r\n                item.id == e.target.id \r\n                ? {...item, X: item.xDiff + e.clientX, Y: item.yDiff + e.clientY, isMoving: !item.isMoving}\r\n                : item\r\n                )\r\n        );\r\n    }\r\n\r\n    const moving = (e) =>{\r\n        setNodes(\r\n            Nodes.map(item => \r\n                item.id == e.target.id & item.isMoving != false\r\n                ? {...item, xDiff: item.X - e.clientX, yDiff: item.Y - e.clientY}\r\n                : item\r\n                )\r\n        );\r\n    }\r\n\r\n    const endMove = (e) =>{\r\n        setNodes(\r\n            Nodes.map(item => item.id == e.target.id ? {...item, isMoving: !item.isMoving} : item)\r\n        )\r\n    }\r\n\r\n    const handleNodeSelection = (e) =>{\r\n        console.log(e)\r\n        setActiveNode(e.target.id)\r\n    }\r\n\r\n    const addNewNode = () =>{\r\n        var newId = maxIdValue(Nodes);\r\n\r\n        var newNode = {\r\n            id: newId,\r\n            xDiff: 0,\r\n            yDiff: 0,\r\n            X: 0,\r\n            Y: 0,\r\n            isMoving: false,\r\n            transition: \"0s ease-in-out\", \r\n            transform: \"scale(1)\"\r\n        }\r\n        setNodes(Nodes => [...Nodes, newNode])\r\n    }\r\n\r\n    const maxIdValue = (array) =>{\r\n        var idList = array.map(item => item.id);\r\n        var maxId = Math.max(...idList) + 1;\r\n        return maxId;\r\n    }\r\n\r\n    const removeNode = (e) =>{\r\n        setNodes(Nodes.filter(node => node.id != e.target.id))\r\n    }\r\n\r\n    const removalTransition = (e) =>{\r\n        setNodes(\r\n            Nodes.map(item => \r\n                item.id == e.target.id \r\n                ? {...item, transition: \"0.5s ease-in-out\", transform: \"scale(0)\"}\r\n                : item\r\n                )\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div \r\n            className=\"track-field\"\r\n            onMouseDown={(e) => startMove(e)}\r\n            onMouseUp={(e) => endMove(e)}\r\n            onMouseMove={(e) => moving(e)}\r\n            onDoubleClick={(e) => removalTransition(e)}\r\n            onTransitionEnd={(e) => removeNode(e)}\r\n        >\r\n            <div className=\"btn-bar\">\r\n                <div className=\"box-control\" onClick={addNewNode}>Add new box!</div>\r\n            </div>\r\n            <h2>Current Node: {activeNode}</h2>\r\n            {\r\n                Nodes.map(node => (\r\n                    <Node \r\n                        key={node.id} \r\n                        id={node.id} \r\n                        xDiff={node.xDiff} \r\n                        yDiff={node.yDiff} \r\n                        handleNodeSelection={handleNodeSelection} \r\n                        transition={node.transition}\r\n                        scale={node.transform}\r\n                    />\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default GraphContainer\r\n","import logo from './logo.svg';\nimport './App.css';\nimport GraphContainer from './components/graph.components/graph-container.component'\nimport './components/graph.components/graph.style.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div  className=\"graph-container\">\n        <GraphContainer/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}